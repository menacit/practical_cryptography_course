#!/usr/bin/env bash
# SPDX-FileCopyrightText: Â© 2023 Menacit AB <foss@menacit.se>
# SPDX-License-Identifier: CC-BY-SA-4.0
# X-Context: Practical cryptography course - PGP and HSM lab

# Lab program to act as a conversation partner (chat bot) for OpenPGP encrypted/signed messages

# If one command fails in a shell pipline, return its error code instead that of the last command
set -o pipefail -o errexit
shopt -s nullglob
IFS=$'\n'

# Function to display log messages generated by script
function log {
	LOG_TYPE="${1}"
	MESSAGE="${2}"

	# If log level setting is not configured in DEBUG mode, don't display log message
	if [[ "${LOG_TYPE}" == 'DEBUG' ]] && [[ "${LOG_LEVEL}" != 'DEBUG' ]]; then
		return
	fi

	echo "${LOG_TYPE}: ${MESSAGE}"

	# If application generates a log message of the error type, exit script after displaying
	if [[ "${LOG_TYPE}" == 'ERROR' ]]; then
		exit 1
	fi
}

# Read log level setting from environment variable or set "INFO" as default if not specified
if [[ -z "${LOG_LEVEL}" ]]; then
	LOG_LEVEL='INFO'
elif [[ "${LOG_LEVEL}" != 'INFO' ]] && [[ "${LOG_LEVEL}" != 'DEBUG' ]]; then
	LOG_LEVEL='INFO'
	log ERROR 'Environment variable "LOG_LEVEL" must contain either "INFO" or "DEBUG"'
fi

# Ensure that necessary paths exist for script
if [[ -z "${BASE_PATH}" ]]; then
	BASE_PATH='/lab'
	log DEBUG "Setting default bot data base path to \"${BASE_PATH}\""
fi

for SUB_PATH in recipient_private_keys recipient_certificates student_data/messages responses; do
	FULL_PATH="${BASE_PATH}/${SUB_PATH}"
	log DEBUG "Checking if required bot path \"${FULL_PATH}\" exist"

	if ! [[ -d "${FULL_PATH}" ]]; then
		log ERROR "Required bot directory \"${FULL_PATH}\" does not exist"
	fi
done

# Read and validate PGP related settings from environment variables
if [[ -z "${VERIFY_SIGNATURE}" ]]; then
	VERIFY_SIGNATURE='true'
elif [[ "${VERIFY_SIGNATURE}" != 'true' ]] && [[ "${VERIFY_SIGNATURE}" != 'false' ]]; then
	log ERROR 'Environment variable "VERIFY_SIGNATURE" must contain either true or false'
fi

if [[ -z "${RESPOND_TO_MESSAGES}" ]]; then
	RESPOND_TO_MESSAGES='true'
elif [[ "${RESPOND_TO_MESSAGES}" != 'true' ]] && [[ "${RESPOND_TO_MESSAGES}" != 'false' ]]; then
	log ERROR 'Environment variable "RESPOND_TO_MESSAGES" must contain either true or false'
fi

if [[ -z "${RECIPIENTS}" ]]; then
	log ERROR 'Environment variable "RECIPIENTS" must contain list with names of recipients'
fi

# Main script logic
log DEBUG "Starting main recipient loop"
for RECIPIENT in ${RECIPIENTS}; do
	log INFO "Running required actions for recipient \"${RECIPIENT}\""

	RECIPIENT_PRIVATE_KEY_PATH="${BASE_PATH}/recipient_private_keys/${RECIPIENT}.key"
	if ! [[ -f "${RECIPIENT_PRIVATE_KEY_PATH}" ]]; then
		log INFO "Generating key for \"${RECIPIENT}\" in \"${RECIPIENT_PRIVATE_KEY_PATH}\""
		sq \
			key generate --expires-in 1y \
			--userid "${RECIPIENT}@example.test" \
			--export "${RECIPIENT_PRIVATE_KEY_PATH}"
	fi

	RECIPIENT_CERTIFICATE_PATH="${BASE_PATH}/recipient_certificates/${RECIPIENT}.crt"
	if ! [[ -f "${RECIPIENT_CERTIFICATE_PATH}" ]]; then
		log INFO "Writing certificate/\"public key\" to \"${RECIPIENT_CERTIFICATE_PATH}\""
		sq \
			key extract-cert \
			--output "${RECIPIENT_CERTIFICATE_PATH}" "${RECIPIENT_PRIVATE_KEY_PATH}"
	fi

	RECIPIENT_CERTIFICATE_ID="$(\
		sq inspect "${RECIPIENT_CERTIFICATE_PATH}" 2>&1 | \
		grep --fixed-strings 'Fingerprint:' | \
		cut --delimiter : --fields 2 | tr --delete '[:blank:]')"
	log INFO "Certificate fingerprint for \"${RECIPIENT}\" is ${RECIPIENT_CERTIFICATE_ID}"

	DECRYPT_COMMAND="sq decrypt --recipient-key ${RECIPIENT_PRIVATE_KEY_PATH}"
	SIGNER_CERTIFICATE_PATH="${BASE_PATH}/student_data/student.crt"
	if ! ${VERIFY_SIGNATURE}; then
		log WARN 'Signature validation of encrypted messages is disabled'
	elif ${VERIFY_SIGNATURE} && ! [[ -f "${SIGNER_CERTIFICATE_PATH}" ]]; then
		log ERROR "Couldn't find signer certificate at \"${SIGNER_CERTIFICATE_PATH}\""
	else
		log INFO "Validating source/integrity of encrypted files using signer certificate"
		DECRYPT_COMMAND="${DECRYPT_COMMAND} --signer-cert ${SIGNER_CERTIFICATE_PATH}"
	fi

	log DEBUG "Generated decryption base command: \"${DECRYPT_COMMAND}\""
	DECRYPT_COMMAND="$(echo "${DECRYPT_COMMAND}" | tr ' ' '\n')"

	for MESSAGE_FILE in ${BASE_PATH}/student_data/messages/*.txt; do
		log INFO "Printing plain-text message \"${MESSAGE_FILE}\" as \"${RECIPIENT}\""
		cat "${MESSAGE_FILE}"
	done

	for MESSAGE_FILE in ${BASE_PATH}/student_data/messages/*.pgp; do
		log INFO "Decrypting and printing message \"${MESSAGE_FILE}\" as \"${RECIPIENT}\""
		${DECRYPT_COMMAND} "${MESSAGE_FILE}"
	done

	if ! ${RESPOND_TO_MESSAGES}; then
		log WARN 'Encrypted/Signed message response is disabled'
		continue
	elif ${RESPOND_TO_MESSAGES} && ! [[ -f "${SIGNER_CERTIFICATE_PATH}" ]]; then
		log ERROR "Couldn't find certificate for response: \"${SIGNER_CERTIFICATE_PATH}\""
	fi

	for MESSAGE_FILE in ${BASE_PATH}/student_data/messages/*.pgp; do
		log INFO "Responding to message \"${MESSAGE_FILE}\" as \"${RECIPIENT}\""
		MESSAGE="$(${DECRYPT_COMMAND} "${MESSAGE_FILE}")"
		REPLY_PATH="${BASE_PATH}/responses/${RECIPIENT}_re_$(basename "${MESSAGE_FILE}")"

		echo -e "I'll meditate upon this. Br, ${RECIPIENT}\n\nIn reply to:\n${MESSAGE}" | \
			sq encrypt \
				--recipient-cert "${SIGNER_CERTIFICATE_PATH}" \
				--signer-key "${RECIPIENT_PRIVATE_KEY_PATH}" \
			> "${REPLY_PATH}"

		log INFO "Saved encrypted/signed response to \"${REPLY_PATH}\" as \"${RECIPIENT}\""
	done
done
