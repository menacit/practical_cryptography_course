#!/usr/bin/env bash
# SPDX-FileCopyrightText: Â© 2023 Menacit AB <foss@menacit.se>
# SPDX-License-Identifier: CC-BY-SA-4.0
# X-Context: Practical cryptography course - One-time password authentication lab

# Lab program to continuously request secret gift advice from server and display it

# Function to display log messages generated by script
function log {
	LOG_TYPE="${1}"
	MESSAGE="${2}"

	# If log level setting is not configured in DEBUG mode, don't display log message
	if [[ "${LOG_TYPE}" == 'DEBUG' ]] && [[ "${LOG_LEVEL}" != 'DEBUG' ]]; then
		return
	fi

	echo "${LOG_TYPE}: ${MESSAGE}"

	# If application generates a log message of the error type, exit script after displaying
	if [[ "${LOG_TYPE}" == 'ERROR' ]]; then
		exit 1
	fi
}

# Read log level setting from environment variable or set "INFO" as default if not specified
if [[ -z "${LOG_LEVEL}" ]]; then
	LOG_LEVEL='INFO'
elif [[ "${LOG_LEVEL}" != "INFO" ]] && [[ "${LOG_LEVEL}" != "DEBUG" ]]; then
	LOG_LEVEL='INFO'
	log ERROR "Environment variable \"LOG_LEVEL\" must contain either \"INFO\" or \"DEBUG\""
fi


# Read runtime options from environment variables and validate that they are set correctly
if [[ -z "${TARGET_SERVER_ADDRESS}" ]]; then
	log ERROR 'Required environment variable "TARGET_SERVER_ADDRESS" is not configured'
else
	TARGET_URL="http://${TARGET_SERVER_ADDRESS}:5000/version-1"
fi

if [[ -z "${SERVER_PASSWORD}" ]]; then
	log ERROR 'Required environment variable "SERVER_PASSWORD" is not configured'
fi

if [[ -z "${REQUEST_DELAY_SECONDS}" ]]; then
	REQUEST_DELAY_SECONDS='5'
fi

# Main application logic - continuously perform requests to get information from a web server
log INFO "Requesting gift advice from ${TARGET_URL} every ${REQUEST_DELAY_SECONDS} second(s)"
log DEBUG "Using password \"${SERVER_PASSWORD}\" for authentication"

REQUEST_COUNTER='0'
while true; do
	REQUEST_COUNTER="$(( REQUEST_COUNTER + 1 ))"
	log DEBUG "Requesting gift advice number ${REQUEST_COUNTER}..."

	# Perform request against HTTP server and print the response
	curl \
		--fail --silent --show-error --connect-timeout 3 \
		--header "X-Secret-Password: ${SERVER_PASSWORD}"  \
		"${TARGET_URL}"

	# Display error message if curl executed unsuccessfully (exit code other than 0)
	if [[ "${?}" == "0" ]]; then
		log INFO 'Successfully fetched secret gift advice!'
	else
		log WARNING "Failed to request gift advice from ${TARGET_URL}"
	fi

	sleep "${REQUEST_DELAY_SECONDS}"
done
