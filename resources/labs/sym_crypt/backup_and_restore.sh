#!/usr/bin/env bash
# SPDX-FileCopyrightText: Â© 2023 Menacit AB <foss@menacit.se>
# SPDX-License-Identifier: CC-BY-SA-4.0
# X-Context: Practical cryptography course - Symmetric file encryption lab

# Lab program to backup and restore example files

# If one command fails in a shell pipline, return its error code instead that of the last command
set -o pipefail

# Function to display log messages generated by script
function log {
	LOG_TYPE="${1}"
	MESSAGE="${2}"

	# If log level setting is not configured in DEBUG mode, don't display log message
	if [[ "${LOG_TYPE}" == 'DEBUG' ]] && [[ "${LOG_LEVEL}" != 'DEBUG' ]]; then
		return
	fi

	echo "${LOG_TYPE}: ${MESSAGE}"

	# If application generates a log message of the error type, exit script after displaying
	if [[ "${LOG_TYPE}" == 'ERROR' ]]; then
		exit 1
	fi
}

# Function to backup files
function backup {
	SOURCE_FILE="${1}"
	TARGET_DIRECTORY="${2}"

	log INFO "Backing up file/directory \"${SOURCE_FILE}\" to ${TARGET_DIRECTORY}"

	# Generate file name/path for backup archive (forward slash is replaced with underscore)
	BACKUP_ARCHIVE_NAME="$(echo "${SOURCE_FILE}" | sed 's|/|_|g')-$(date --iso-8601=s).tar.gz"
	BACKUP_ARCHIVE_FILE="${TARGET_DIRECTORY}/${BACKUP_ARCHIVE_NAME}"
	log DEBUG "Generate backup archive file path: \"${BACKUP_ARCHIVE_FILE}\""

	# Use the tar utility to create compressed archive of source file/directory
	tar --create --auto-compress --file "${BACKUP_ARCHIVE_FILE}" -- "${SOURCE_FILE}"

	if [[ "${?}" == "0" ]]; then
		log INFO "Successfully backed up \"${SOURCE_FILE}\" to \"${BACKUP_ARCHIVE_FILE}\""
	else
		log ERROR "Failed to backup up \"${SOURCE_FILE}\" to \"${BACKUP_ARCHIVE_FILE}\""
	fi
}

# Function to restore files
function restore {
	BACKUP_ARCHIVE_FILE="${1}"
	TARGET_DIRECTORY="${2}"

	# Validate that specified backup archive file is actually an archive
	if [[ "${BACKUP_ARCHIVE_FILE: -7}" != ".tar.gz" ]]; then
		log ERROR "Specified source file \"${BACKUP_ARCHIVE_FILE}\" isn't a tar.gz archive"
	fi

	log INFO "Restoring backup archive \"${BACKUP_ARCHIVE_FILE}\" to \"${TARGET_DIRECTORY}\""

	# Use the tar utility to decompressed and unpack backup archive
	tar \
		--extract --auto-compress \
		--file "${BACKUP_ARCHIVE_FILE}" \
		--directory "${TARGET_DIRECTORY}"

	if [[ "${?}" == "0" ]]; then
		log INFO "Restored archive \"${BACKUP_ARCHIVE_FILE}\" to \"${TARGET_DIRECTORY}\""
	else
		log ERROR "Failed to restore \"${BACKUP_ARCHIVE_FILE}\" to \"${TARGET_DIRECTORY}\""
	fi
}

# Read log level setting from environment variable or set "INFO" as default if not specified
if [[ -z "${LOG_LEVEL}" ]]; then
	LOG_LEVEL='INFO'
elif [[ "${LOG_LEVEL}" != "INFO" ]] && [[ "${LOG_LEVEL}" != "DEBUG" ]]; then
	LOG_LEVEL='INFO'
	log ERROR "Environment variable \"LOG_LEVEL\" must contain either \"INFO\" or \"DEBUG\""
fi

# Generate script usage description
USAGE_DESCRIPTION=$(cat <<EOF
${0} - Lab program to backup and restore example files

USAGE
 # Backup mode
 ${0} backup <DIRECTORY_OR_FILE_TO_BACKUP> <DIRECTORY_TO_STORE_BACKUP_ARCHIVE_IN>

 # Restore mode
 ${0} restore <BACKUP_ARCHIVE_WITH_FILES_TO_RESTORE> <DIRECTORY_TO_RESTORE_FILES_IN>
 
EOF
)

# First command line argument should specify operation mode for script
SCRIPT_MODE="${1}"
if [[ "${SCRIPT_MODE}" != "backup" ]] && [[ "${SCRIPT_MODE}" != "restore" ]]; then
	echo "${USAGE_DESCRIPTION}"
	log ERROR "First command line argument must be either \"backup\" or \"restore\""
fi

# Source and target directory for backup/restore specified as second and third argument
SOURCE_FILE="${2}"
TARGET_DIRECTORY="${3}"

# Verify that source/target directory arguments have been specified and they exist
if [[ -z "${SOURCE_FILE}" ]] || [[ -z "${TARGET_DIRECTORY}" ]]; then
	echo "${USAGE_DESCRIPTION}"
	log ERROR "Source and target directory for ${SCRIPT_MODE} must be specified"
fi

if ! [[ -e "${SOURCE_FILE}" ]]; then
	echo "${USAGE_DESCRIPTION}"
	log ERROR "Specified ${SCRIPT_MODE} source file/directory \"${SOURCE_FILE}\" doesn't exist"
fi

if ! [[ -d "${TARGET_DIRECTORY}" ]]; then
	echo "${USAGE_DESCRIPTION}"
	log ERROR "Specified ${SCRIPT_MODE} target directory \"${TARGET_DIRECTORY}\" doesn't exist"
fi

# Execute backup or restore function depending on script execution mode
${SCRIPT_MODE} "${SOURCE_FILE}" "${TARGET_DIRECTORY}"
